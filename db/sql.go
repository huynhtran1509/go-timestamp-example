// Code generated by go-bindata.
// sources:
// sql/all.sql
// sql/create_timestamps.sql
// sql/insert.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlAllSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\x50\x2c\x4e\xcd\x49\x4d\x2e\x71\xcc\xc9\x51\x00\xe2\x90\xcc\xdc\xd4\xe2\x92\xc4\xdc\x82\x62\x2e\xae\x60\x57\x1f\x57\xe7\x10\x85\xe2\xd4\xe4\xfc\xbc\x94\xe2\xf8\xe2\xcc\xbc\xe4\xd4\xf8\xd4\x82\xfc\xe4\x0c\x05\xb7\x20\x7f\x5f\x85\x12\xb8\x5a\x6b\x2e\x40\x00\x00\x00\xff\xff\xd3\x4d\x60\x17\x49\x00\x00\x00")

func sqlAllSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAllSql,
		"sql/all.sql",
	)
}

func sqlAllSql() (*asset, error) {
	bytes, err := sqlAllSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/all.sql", size: 73, mode: os.FileMode(420), modTime: time.Unix(1444406786, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlCreate_timestampsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\x28\x56\xd0\xe0\x52\x50\xc8\x4c\x51\xf0\xf4\x0b\x71\x75\x77\x0d\x52\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xd4\x01\xca\x14\xa7\x26\xe7\xe7\xa5\x14\xc7\x17\x67\xe6\x25\xa7\xc6\xa7\x16\xe4\x27\x67\xc0\x95\xfa\xf9\x87\x28\xf8\x85\xfa\xf8\x70\x69\x5a\x73\x01\x02\x00\x00\xff\xff\xa1\x86\xc7\x95\x5e\x00\x00\x00")

func sqlCreate_timestampsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCreate_timestampsSql,
		"sql/create_timestamps.sql",
	)
}

func sqlCreate_timestampsSql() (*asset, error) {
	bytes, err := sqlCreate_timestampsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/create_timestamps.sql", size: 94, mode: os.FileMode(420), modTime: time.Unix(1444408198, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlInsertSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\x50\xcc\xcc\x2b\x4e\x2d\x2a\x51\xf0\x04\x53\x21\x99\xb9\xa9\xc5\x25\x89\xb9\x05\x5c\x40\x29\x15\x43\x2b\x85\xe2\xd4\xe4\xfc\xbc\x94\x62\x85\xcc\xbc\x12\x33\x13\x2e\x2e\x4f\xbf\x60\xd7\xa0\x10\x05\x4f\xbf\x10\x7f\x85\x12\x98\xda\x62\x05\x0d\xa8\xb2\xf8\xe2\xcc\xbc\xe4\xd4\xf8\xd4\x82\xfc\xe4\x0c\x4d\x85\x30\x47\x9f\x50\xd7\x60\x05\x0d\x7b\x4d\x6b\x2e\x40\x00\x00\x00\xff\xff\x9b\xa4\x59\x7a\x6a\x00\x00\x00")

func sqlInsertSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlInsertSql,
		"sql/insert.sql",
	)
}

func sqlInsertSql() (*asset, error) {
	bytes, err := sqlInsertSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/insert.sql", size: 106, mode: os.FileMode(420), modTime: time.Unix(1444406767, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/all.sql": sqlAllSql,
	"sql/create_timestamps.sql": sqlCreate_timestampsSql,
	"sql/insert.sql": sqlInsertSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"all.sql": &bintree{sqlAllSql, map[string]*bintree{
		}},
		"create_timestamps.sql": &bintree{sqlCreate_timestampsSql, map[string]*bintree{
		}},
		"insert.sql": &bintree{sqlInsertSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

